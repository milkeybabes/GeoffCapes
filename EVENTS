		; ACTUALL GAMESOLTV1:	DB 0training_mode:		; *********************		; *** TRAINING MODE ***		; *********************	LDA #0	STA TOGGLE	JSR MVETRA	; INIT MEN	JSR BASHINIT	JSR DIGITAL		LDA #11	JSR PARAM	JSR GET_JOY2	; WAIT FOR NO	JSR GET_JOY	; KEY THEN	LDA KFIRE	; WAIT FOR A	BNE RAMSET	; KEY.	LDA #9	STA TV1	LDA #0	STA OLTV1KEEPGOING:	LDA TV1	CMP OLTV1	BEQ KEEP1		STA OLTV1		LDX #45	LDY #176	JSR IMAGE		; JSR SPEEK_NUMBERKEEP1:	JSR BASH	LDA TV1	BNE KEEPGOING	LDX #45	LDY #176	JSR IMAGE	JMP NO_RANDOMRAMSET:	JSR RANDOM	ORA #128	STA TEMPX1			LDA #5	STA NUMBER_BARS	JSR BAR_SET_UPSTOPED:	LDA TOGGLE	EOR #1	STA TOGGLE	JMP A_OR_MIRAMSTUFF:	JSR V_SYNC	DEC TEMPX1	BEQ NO_RANDOM	LDA NUMBER_BARS	CMP #4	BEQ STOPED	CMP #12	BCS STOPEDA_OR_MI:	LDA TOGGLE	BEQ RAN1	JSR BAR_ADD	JMP RAMSTUFFRAN1:	JSR BAR_MINUS	JMP RAMSTUFFNO_RANDOM:	JSR INIT_ARROW	LDA #0	STA TIMER_STATUSUNTIL_FA:	LDX #5	JSR DPAUSE	JSR ARROW	LDA number_bars	BNE UNTIL_FA	LDA Ztype	BNE UNTIL_FA	RTS	; RETURN BACKARROW:	JSR repeat	JSR GARROW	; BOX_CORDSno_key:	JSR JOY	; GET JOYSTICK VALUES	LDA KFIRE	; IF NOT FIRE	BEQ PAST	; IGNORE. ELSE	LDX BOXNUMBER	; GET BOXNUMBER	LDA level1-1,X	CMP #30	BCS beep	INC level1-1,X	; AND +1 TO	JSR LEVEL	; PRESENT LEVEL	LDA TOGGLE	; VALUES.	EOR #1	; TOGGLE THE TOGGLE TO	STA TOGGLE	; ALLOW FOR	BEQ PAST	; MORE ENERGY	JSR bar_minus	; FOR USE.	RTS		; AND RETURN.beep:	LDA #7	; BEEP AT ERROR	JMP &FFEEPAST:	JMP BOX_DISPMVETRA:	; INITIALSE COUNTER			LDA #0	; FOR FLIPPING THROUGH	STA left_man	; TRAINING MODE	RTS	; MAN ON WEIGHTSrepeat:	; FLIP THROUGHT SPRITES	LDA #4	; GEOF3	JSR PARAM	LDA left_man	CLC	; SECOND SPRITE	ADC #3	; IS +3 TO FIRST	STA right_man	JSR V_SYNC		LDA left_man	LDX #18	LDY #97	JSR IMAGE		LDA right_man	LDX #30	JSR IMAGE	INC left_man	LDA left_man	; CHECK IF	CMP #3	; LAST SPRITE HAS	BNE no_end	; BEEN USED	JMP MVETRA	; IF NOT EXITno_end:	; ELSE RE_INITIALISE	RTSUSERPOINT:	DB 0COMPOINT:	DB 0DELYCOUNT:	DB 0MISSED:	DB 0GOTS:	DB 0PLAY_1:		; ********************		; * CAR ROLLING OVER *		; ********************	LDA #16		;DISPLAY CHINKY	JSR PARAM	LDA #0	LDX #32	LDY #80	JSR IMAGE	LDA #7		; CAR	JSR PARAM	LDX #30	LDA #1	LDY #1CAR_MOV:	JSR SBACK	JSR BACK	INY	INY	CPY #80	BCC CAR_MOVCAR2_MOV:	JSR IMAGE	INY	CPY #90	BNE CAR2_MOV	JSR SHUDDER	LDA #7	JSR PARAM	LDA #0	LDX #30	LDY #90	JSR IMAGE	JSR INIT_ARROW	JSR SIMON_INIT	JSR TUNEPLEASEREPEAT1:	LDA DEAD	BEQ NOT_DEAD1	RTSNOT_DEAD1:	JSR SIMON_PLAY	BEQ GOT_IT	INC MISSED	; MISSED	LDA MISSED	CMP #1	BNE REPEAT1	LDA #0	STA MISSED		; STA GOTS (BE ROTTEN)	LDA FRAME	BEQ REPEAT1	DEC FRAME	JSR SP_UPDATE	JMP REPEAT1GOT_IT:	LDA #8	JSR SOUND	INC GOTS	; SAME	LDA GOTS	CMP #6	BEQ SURE_HAVE	JMP NO_F2SURE_HAVE:	LDA #0	STA GOTS	STA MISSED	INC FRAME	LDA FRAME	CMP #3	BNE NO_FINISH	LDA #0	; GAME OVER !!	STA DEAD	RTS	; END EVENT	NO_FINISH:	JSR SP_UPDATE	NO_F2:	INC USERPOINT		;JSR SIMON1	JMP REPEAT1SP_UPDATE:	LDA #5	; GEOFF	JSR PARAM		LDY #90	LDX #25	LDA FRAME	JSR IMAGED_CARS:	LDY #90 	LDA #6	; CAR FACE ON	JSR PARAM	LDX #20	LDA FRAME	JSR IMAGE	LDA #7	; CAR SIDE VIEW	JSR PARAM	LDX #30	LDA FRAME	JMP IMAGE	; *******************	; **** WRESTLING ****	; *******************PLAY_2:	AB38	EQU 40WRESTLING:	LDA #100	STA HISEN	STA GEFEN	LDA #18	STA PARAM1	STA OPARAM	LDA #15	; YOUR X	STA TEMPX1	STA OLDX1	LDA #80	STA TEMPY1	STA TEMPY2	STA OPONY	LDA #15	; COMPUTER'S X	STA TEMPX2	STA OLDX2	LDA #38	STA OPONX	LDA #0	STA FRAME	LDA #8	STA OPFRAM	JSR SPRITE_ON	JSR HIM_ON	JSR TUNEPLEASEREPEAT2:	LDA DEAD	BEQ NOT_DEAD2	RTSNOT_DEAD2:	JSR TIME_UPDATE	JSR EFFORTUD	LDX #4	JSR DPAUSE	LDA OPONX	SEC	SBC TEMPX1	CMP #4	LDA #0	ADC #0	EOR #1	STA TOUCHING	ITSUREOK:	JSR JOYLOQ:			LDA TOGGLE	EOR #1	STA TOGGLE	BEQ BOR1	JSR RANDOM	AND #63		ADC LEVEL6	SBC #10	CMP #45	BCS BORING	JSR AGROBACK	JMP BORINGBOR1:	LDA KFIRE	BEQ BORING	JSR AGROBORING:		LDA TEMPX1	CMP #14	BCC FELL_OFF	LDA OPONX	CMP #AB38	BCS HIM_FELL	LDA TOUCHING	BEQ NTOUCH			JSR TOUCH	JMP OVERTHISNTOUCH:		LDA TEMPX1	CLC	ADC KRIGHT	STA TEMPX1	JSR RANDOM	CMP #150	BCC OVERTHIS		DEC OPONXOVERTHIS:	LDA TEMPX1	SEC	SBC KLEFT	STA TEMPX1		AND #3	STA FRAME	LDA OPONX	AND #3	CLC	ADC #8	STA OPFRAM	LDA KLEFT	ORA KRIGHT	BNE SUPPOSE	LDA #0	STA FRAMESUPPOSE:			JSR OPCHANGE	JSR CHANGE	JMP REPEAT2FELL_OFF:	LDA #3	STA DEAD	LDA #6	STA FRAME	JSR CHANGE	JSR VDU	DB 31,5,5	NOP	JSR LINE_PRINT	DB 'Your Off'	NOP	LDA #9	JSR SOUND	LDA #10	JSR SOUND	LDX #50	JSR DPAUSE	RTS	HIM_FELL:	LDA #7	STA OPFRAM	JSR OPCHANGE	LDA #0	STA DEAD	LDA #13	JSR SOUND	LDA #14	JSR SOUND	LDA #13	JSR SOUND	JSR VDU	DB 31,6,7	DB 'GOT HIM!'	NOP	JSR STOP	LDX #50	JSR DPAUSE	RTSTOUCH:		LDA GEFEN	CLC	ADC LEVEL6	SBC #10	CMP HISEN	BCC TOUCH1	LDA KRIGHT	BEQ TOUCH2	INC TEMPX1	INC OPONX	RTSTOUCH1:		DEC TEMPX1	DEC OPONX	RTSTOUCH2:	RTSOPCHANGE:	LDA OPONX	CMP OPONX1	BNE DODO	LDA OPONY	CMP OPONY1	BNE DODO	LDA OPFRAM	CMP OPFRAM1	BNE DODO	RTSDODO:		JSR HIM_OFF	JMP HIM_ONHIM_ON:	LDA OPARAM	JSR PARAM	LDA OPFRAM	STA OPFRAM1	LDX OPONX	STX OPONX1	LDY OPONY	STY OPONY1	JSR IMEOR	RTSHIM_OFF:	LDA OPARAM	JSR PARAM	LDA OPFRAM1	LDX OPONX1	LDY OPONY1	JSR IMEOR	RTSAGROBACK:	LDA TOUCHING	BEQ NTOC	LDA #5	STA OPFRAM	JSR OPCHANGE	LDX #10	JSR DPAUSE	LDA #4	STA DAVE1	LDA #6	STA FRAME	LDA #12	JSR SOUND	LDA #5	JSR SOUNDAGBL:	JSR RANDOM	JSR LEVDOWN	DEC TEMPX1	LDA TEMPX1	CMP #14	BCC NMSL	JSR CHANGE	LDX #10	JSR DPAUSE	DEC DAVE1	BNE AGBLNMSL:	LDA #0	STA FRAME	LDA GEFEN	SEC	SBC #5	STA GEFEN	RTS	NTOC:	RTS	AGRO:		FARMSM:	LDA #%00110000	JSR LEVDOWN	LDA #4	STA FRAME	JSR CHANGE	LDX #25	JSR DPAUSE		LDA TOUCHING	BEQ HEHE	LDA #4	JSR SOUND	LDA HISEN	CMP #200	BCS MMM	LDA #7	STA OPFRAM	LDA #5	STA DAVE1SLIDE:	JSR OPCHANGE	INC OPONX	LDA OPONX	CMP #AB38	BCS NMSL1	LDX #5	JSR DPAUSE	DEC DAVE1	BNE SLIDENMSL1:	LDA #1	STA OPFRAM	LDA HISEN	SEC	SBC #5	STA HISEN	; NOT REALLY	RTSMMM:	SEC	SBC #10	STA HISEN	HEHE:	LDA GEFEN	SEC	SBC #2	STA GEFEN		RTS	DPAUSE:	PHA	STX DAVETPAULOOP:	JSR V_SYNC	DEC DAVET	BNE PAULOOP	PLA	RTS			OPONX:	DB 0OPONY:	DB 0OPONX1:	DB 0OPONY1:	DB 0OPARAM:	DB 0OPFRAM:	DB 0OPFRAM1:	DB 0GEFEN:	DB 0HISEN:	DB 0TOUCHING:	DB 0STUN:	DB 0DAVE1:	DB 0DAVE2:	DB 0DAVE3:	DB 0DAVE4:	DB 0DAVET:	DB 0BOUTS:	DB 0LOSES:	DB 0PLAY_3:		;********************		;*** BELL BY DAVE ***		;********************		JSR INIT_ARROW 	LDA #17	STA PARAM1	LDA #20	STA TEMPX1	LDA #100	STA TEMPY1	LDA #0	STA FRAME	JSR SPRITE_ON	LDA #1	STA &85	JSR DIGITAL	JSR TUNEPLEASE	REPEAT3:	LDX #3	JSR DPAUSE	JSR EFFORTUD	LDA DEAD	BEQ STILLGOING	JMP HITITSTILLGOING:	JSR CHANGE	JSR TIME_UPDATE	JSR V_SYNC	JSR V_SYNC	LDA &85	JSR IMEORMUS		JSR V_SYNC	LDA &85	JSR IMEORMUS	JSR FAIRBELL	JSR GARROW	LDA KFIRE	BEQ REPEAT3		LDA BOXNUMBER	JSR BOXDOWN		LDA BOXNUMBER	SEC	SBC #1	CMP &85	BNE REPEAT3	JSR MUSCLES	JMP REPEAT3BELLT:	DB -1,-2,-1,0	;XBELLT1:DB 0,1,2,1	;YBELL_FAINT:	RTSHITIT:	LDA DEAD	CMP #2	BEQ BELL_FAINT	JSR BASHINIT	LDA #11	JSR PARAM	LDX #35	LDY #176	LDA #0	JSR IMAGE	JSR IMEOR	LDX #38	JSR IMAGE	JSR IMEOR	LDX #41	JSR IMAGE	JSR IMEORHITIT1:	LDX #3	JSR DPAUSE	JSR BASH	LDY FRAME	LDA TEMPX1	CLC 	ADC BELLT,Y	STA TEMPX1	LDA TEMPY1	CLC	ADC BELLT1,Y	STA TEMPY1	JSR CHANGE	JSR BASH	LDA TEMPX1	CMP #13	BCC OFFSCR 		LDA TEMPY1	CMP #108	BCC HITIT1OFFSCR:	LDA TEMPX1	CMP #14	BEQ YESHIT	CMP #15	BEQ YESHIT	LDA #5	JSR SOUNDMISSER:	JSR VDU	DB 31,8,14	NOP	JSR LINE_PRINT	DB 'MISSED IT !'	NOP	JSR TIME	LDA #3	STA DEAD	RTSYESHIT:	LDA #23	STA PARAM1	LDA #13	STA TEMPX1	LDA #108	STA TEMPY1	LDA #0	STA FRAME	JSR SPRITE_OFFGO_AHEAD:	CLC	LDA NUMBER_BARS	ADC ZTYPE	BEQ LIMEYESL:	LDX #5	JSR DPAUSE	JSR CHANGE	JSR BAR_MINUS	DEC TEMPY1		DEC TEMPY1	LDA TEMPY1	CMP #57	BCC A_HIT	LDA number_bars	BNE YESL	LDA Ztype	BNE YESLLIME:	JMP MISSERA_HIT:	LDA #0	STA DEAD	LDA #7	JSR SOUND	RTSMUSCLES:	PHA	LDA #3	JSR SOUND	PLA	TAX	CPX #0	BEQ MUS1	; FOOT	DEX	BEQ MUS4	; HAND	DEX 	BEQ MUS3	; ARM	DEX	BEQ MUS2	; LEG	DEX 	BEQ MUS5	; TORSO 	MUS1:	LDA TEMPX1	CMP #15	BCC NMUS1	; FOOT	DEC TEMPX1NMUS1:	RTS	MUS4:	LDA TEMPX1	CMP #25	BCS NMUS4	INC TEMPX1NMUS4:		RTSMUS3:	LDA TEMPY1	CMP #50	; ARM	BCC NMUS3	DEC TEMPY1NMUS3:	RTSMUS5:	JSR MUS3	JSR MUS3	JSR MUS3	JSR MUS4	;TORSO	RTSMUS2:	INC DAVE1	LDA DAVE1	AND #3	BNE NMUS2	INC FRAME	LDA FRAME	; HAND	AND #3	STA FRAMENMUS2:	RTSFAIRBELL:	INC DELYCOUNT	LDA DELYCOUNT	CLC 	ADC LEVEL6	CMP #40	BCC FAIR1	LDA #0	STA DELYCOUNT	LDA #5	JSR RANDOM2	STY &85FAIR1:	RTSPLAY_4:			; *********************		; ****** LOG CHOP *****		; *********************RESTART_LOG:	LDA #1	STA ADDNU	LDA #0	STA FRAME	STA FRAME1	STA YADD	LDA #21	STA PARAM1	LDA #12	STA TEMPX1	STA OLDX1	LDA #65	STA TEMPY1		JSR SPRITE_ON	LDA TUNE_BIT	BNE REPEAT4	JSR TUNEPLEASEREPEAT4:	LDA DEAD	BEQ NOT_DEAD4	RTSNOT_DEAD4:	JSR TIME_UPDATE	JSR EFFORTUD		LDA LEVEL6	AND #&FE	EOR #30	ASL A	ASL A	ASL A	BEQ FDDS	TAY	WAIT:	LDX #100FUCKPFF:	DEX	BNE FUCKPFF	DEY	BNE WAIT		FDDS:	JSR JOY	LDA KFIRE	BEQ NCHOP	LDA TOGGLE	EOR #1	STA TOGGLE	BEQ GIV_IT_A_REST 	LDA #%00110000	JSR LEVDOWNGIV_IT_A_REST:	LDA #1	STA YADD	LDA #0	STA ADDNUNCHOP:		; AXE MOVEMENT		LDA TEMPY1	CLC	ADC YADD	STA TEMPY1	LDA TEMPX1	CMP #14+(2*16)	BCS OSCIL		CMP #12	BCS OSCIL1OSCIL:	LDA ADDNU	EOR #254	STA ADDNUOSCIL1:	LDA TEMPX1	CLC	ADC ADDNU		STA TEMPX1	JSR CHANGE	; CHANGE1BIT_OUT:	JSR CHOP_LOG	BCC RESTART2	JMP RESTART_LOGRESTART2:	JMP REPEAT4CHOP_LOG:	LDA TEMPY1	CMP #112-4	BNE NOT_DONE	JSR REMOVE	LDA #0	STA DEAD	PLA	PLA	RTS	; END EVENTLEAVE2:	JSR SPRITE_OFF	SEC	RTSNOT_DONE:	CMP #72	BCC LEAVE	LDA TEMPX1	CMP #14	BCC LEAVE2	CMP #14+(2*16)-3	BCS LEAVE2	SEC	SBC #14	; START OF LOG OFFSET	LSR A	; DIV 2 AS BLOCK = 2*4		STA &70	LDA TEMPY1	SEC	SBC #72	; Y OFFSET	LSR A	; DIV 4	LSR A	; Y ( 0 TO 6)	ASL A	; * 2	ASL A	; * 4	ASL A	; * 8	ASL A	; * 16	CLC	ADC &70	; + X	TAY	LDA LOG_DATA,Y	BNE chop_it LEAVE:	CLC	; IF NO HIT	RTSchop_it:	CMP #1	BEQ NO_NOT	TYA	PHA	JSR SPRITE_OFF	PLA	TAX	DEC LOG_DATA,X	LDA #6	JSR SOUND	; HIT NOT	SEC		; OR HARD WOOD	RTSNO_NOT:	TYA	PHA	JSR SPRITE_OFF	PLA	TAY	LDA #0	STA LOG_DATA,YREMOVE:	LDA #10	; CHOPBIT	JSR PARAM	LDA TEMPY1	CLC	ADC #88-72	TAY	LDA TEMPX1	AND #&FE	; EVENS ONLY	TAX	LDA #0	JSR IMAGE	LDA #6	JSR SOUND	SEC	; IF HIT	RTS 	CHANGE:	LDA TEMPX1	CMP OLDX1	BNE UPDATE_IT	LDA TEMPY1	CMP OLDY1	BNE UPDATE_IT	LDA FRAME	CMP FRAME1	BNE UPDATE_IT	RTS	  UPDATE_IT:	JSR SPRITE_OFF	JMP SPRITE_ONSPRITE_OFF:	LDA PARAM1	JSR PARAM	LDA FRAME1	LDX OLDX1	LDY OLDY1	JMP IMEORSPRITE_ON:	LDA PARAM1	JSR PARAM	LDX TEMPX1	STX OLDX1	LDY TEMPY1	STY OLDY1	LDA FRAME	STA FRAME1	JMP IMEORCHANGE1:	LDA TEMPX1	CMP OLDX1	BNE UPDATE2	LDA TEMPY1	CMP OLDY1	BNE UPDATE2	LDA FRAME	CMP FRAME1	BNE UPDATE2	RTS	  UPDATE2:	JSR SPRITE_OFF	JMP SPRITE_ON2SPRITE_ON2:	LDA PARAM1	JSR PARAM	LDX TEMPX1	STX OLDX1	LDY TEMPY1	STY OLDY1	LDA FRAME	STA FRAME1	JMP IMAGEPLAY_5:		;****************		;** TUG OF WAR **		;****************	LDA #16	STA TEMPX1	STA OLDX1		JSR INIT_ARROW	JSR SIMON_INIT	JSR TUNEPLEASEREPEAT5:	LDA DEAD	BEQ NOT_DEAD5	RTSNOT_DEAD5:	JSR SIMON_PLAY	BEQ ALL_RIGHT	INC MISSED	; MISSED	LDA MISSED	CMP #3	BNE REPEAT5	LDA #0	STA MISSED	INC TEMPX1	LDA #3	JSR SOUND	LDA TEMPX1	CMP #19	BEQ YOUR_DEAD 	JSR UPDATE_TUGER	JMP REPEAT5YOUR_DEAD:	LDX OLDX1	; YOU FALL IN	JSR TUGIES	JSR ROPE2_DOWN	LDA #2	; TUGMEN	JSR PARAM	LDA #3	LDY #78	LDX #23	JSR ANIM	; ANIMATE	LDA #13	; SPLAT WITH WEIGHT	JSR PARAM	LDA #1	LDX #25	LDY #110	JSR V_SYNC	JSR IMAGE	JSR SHUDDER	LDA #3	STA DEAD	RTS	; END EVENTALL_RIGHT:	LDA #8	JSR SOUND	INC GOTS	; SAME	LDA GOTS	CMP #6	BEQ MOVE_YOU	JMP HAVE_NOTMOVE_YOU:	LDA #0	STA GOTS	STA MISSED	DEC TEMPX1	LDA #3	JSR SOUND	LDA TEMPX1	CMP #11	BNE NOT_WONE	LDX OLDX1	JSR TUGIES	JSR ROPE_DOWN	LDA #2	; TUGMEN	JSR PARAM	LDA #3+4	LDY #78	LDX #31	JSR ANIM	; ANIMATE	LDA #13	; SPLAT WITH WEIGHT	JSR PARAM	LDA #2	LDX #27	LDY #110	JSR V_SYNC	JSR IMAGE	JSR SHUDDER		; COMPUTER FALL IN	LDA #0	; GAME OVER !!	STA DEAD	RTS	; END EVENT	NOT_WONE:	JSR UPDATE_TUGER	HAVE_NOT:	INC USERPOINT		; JSR SIMON1 ******	JMP REPEAT5UPDATE_TUGER:	LDX OLDX1	JSR TUGIES	LDA FRAME	CLC	ADC #1	AND #1	STA FRAME	CLC	ADC #4	STA FRAME1	LDA TEMPX1	CMP #12	BNE CHECK1	LDA #2+4	STA FRAME1CHECK1:	CMP #18	BNE CHECK2	LDA #2	STA FRAMECHECK2:	LDX TEMPX1	STX OLDX1	JMP TUGIESANIM:	JSR V_SYNC	JSR IMEOR	JSR RGSV	JSR KB_OF	LDA #&81	LDX #LOW 75	LDY #HIGH 75	JSR &FFF4	JSR KB_ON	JSR RGLD	JSR V_SYNC	JMP IMEORSHUDDER:	LDA ELK	BNE ELKVER	LDX #0SHUD:	INX	JSR V_SYNC	LDY #5	STY &FE00	STX &FE01		CPX #5	BNE SHUD	LDA #4	JSR SOUND	JSR V_SYNC	LDA #5	STA &FE00	LDA #0	STA &FE01	RTSELKVER:	LDA #4	JMP SOUNDBARREL_SC:	DB 0WAY:		DB 0DB 'STUART GET TO BED WITH YOUR COMMADORE AND BOB'PLAY_6:		; ********************		; ** BARREL LOADING **		; ********************		LDA #1	STA PARAM1	LDA #22	STA TEMPX1	STA OLDX1	LDA #86	STA TEMPY1	STA OLDY1		LDA #0	STA FRAME	STA FRAME1	STA BARREL_SC	STA &85	STA DELYCOUNT	STA GOTS	LDA #255	STA LBOX	JSR INIT_ARROW	JSR DBARROWS	LDA TUNE_BIT	BNE O_NO	JSR TUNEPLEASEO_NO:	JSR B_O_T_F	JSR PAUS1REPEAT6:	LDA DEAD	BEQ NOT_DEAD6	RTSNOT_DEAD6:	LDA &85	JSR IMEORMUS	JSR V_SYNC	LDA &85	JSR IMEORMUS	JSR V_SYNC  	JSR TIME_UPDATE	JSR GARROW2	JSR EFFORTUD	; UPDATE EFFORT	LDA LEVEL6	; LEVEL USED	AND #&FE	; EVENS ONLY	EOR #30	; LEVEL USED	ASL A	; FOR DELAY			ASL A	; OF FLASHING	ASL A	; SPRITES.	ADC #1	; +1 SO NOT AT ZERO	STA DEL2+1	; SELF MODYFING	JSR PAUSE	; CODE OK	LDA KFIRE	BEQ NO_THROW	JMP JUMPERNO_THROW:		LDX BOXNUMBER	; IF YOU HAVE	CPX LBOX	; NOT MOVED 	BEQ REPEAT6	; GO BACK	STX LBOX	; STORE NEW NO.	DEX	CPX &85	BNE REPEAT6	LDA GOTS	; IF ALREADY	BNE REPEAT6 	; BEEN HERE	INC GOTS	; TURN TO 0	LDA BARREL_SC	BNE BAR_SC2 	LDA #3	JSR SOUND	LDA BOXNUMBER	JSR BOXDOWN	LDA TEMPX1	CMP #24	BEQ YFALL	CMP #30	BEQ YFALL	CMP #36	BNE NOT_FALLYFALL:	JMP FALLNOT_FALL:	INC TEMPX1	LDA TEMPX1	CMP #44	BCS SCREEN2	AND #1	STA FRAMENOT_Y:	JSR CHANGE	JMP REPEAT6SCREEN2:	LDA #2	JSR DRAWSCR	LDA #11	STA TEMPX1	STA OLDX1	LDA #86	STA TEMPY1	STA OLDY1	LDA #1	STA BARREL_SC	LDA #0	STA FRAME	JMP REPEAT6BAR_SC2:	LDA TEMPY1	CMP #86-(5*8)	BEQ TO_TRUCK	BCC TO_TRUCK	LDA #3	JSR SOUND	INC TEMPX1	LDA TEMPX1	PHA	AND #1	STA FRAME	PLA	CMP #14	BCC NOT_Y	CMP #16	BCS NOT_FIRST	INC TEMPX1	LDA #2	STA FRAME	JMP NOT_YNOT_FIRST:	LDA TOGGLE	EOR #1	STA TOGGLE	CLC	ADC #2	STA FRAME	LDA #3	JSR SOUNDAT_TOP:	INC TEMPX1	LDA TEMPY1	SEC	SBC #8	STA TEMPY1		JMP NOT_YTO_TRUCK:	CMP #86-(5*8)	BNE SECOND_TIM	LDA #0	STA FRAME	JMP AT_TOP	SECOND_TIM:	LDA TEMPX1	PHA	AND #1	STA FRAME	PLA	CMP #36	BEQ AT_FIN	LDA #3	JSR SOUND 	INC TEMPX1AT_FIN:	JMP NOT_YNO_WAY:	JMP REPEAT6JUMPER:	LDA BARREL_SC	BEQ SCREEN0	JMP CHECK_THROWSCREEN0:	LDA TEMPX1	CMP #39	BCS NO_WAY	; SCREEN 1	CMP #24	BEQ YEP	CMP #30	BEQ YEP	CMP #36	BEQ YEPFALL:	JSR SPRITE_OFF	LDA #13	; SPLAT WITH WEIGHT	JSR PARAM	LDA #1	LDX TEMPX1	INX	LDY #110	JSR V_SYNC	JSR IMAGE	JSR SHUDDER	LDX #20	JSR DPAUSE	LDA #1	JSR DRAWSCR	JMP PLAY_6YEP:	LDA FRAME	PHA	LDA #5	STA FRAME	LDY #0	STY TEMPY2JUMP:	LDA X_TABLE,Y	CLC	ADC TEMPX1	TAX	CPX #44	BCC NO_SEC	PLA	STA FRAME	JMP SCREEN2NO_SEC:	STX TEMPX1	LDA Y_TABLE,Y	CLC	ADC TEMPY1	TAY	STY TEMPY1	JSR V_SYNC	JSR V_SYNC	JSR CHANGE	JSR V_SYNC	INC TEMPY2	LDY TEMPY2	CPY #5	BNE JUMP	PLA	STA FRAME		JSR CHANGE	JMP REPEAT6	X_TABLE:	DB 0,1,3,1,0Y_TABLE:	DB -5,-3,0,3,5CHECK_THROW:		; SCREEN 2	LDA TEMPX1	CMP #36	BEQ NEXT_BARROW	JMP REPEAT6NEXT_BARROW:	LDA #4	STA FRAME	JSR CHANGE	LDA #0	JSR PARAM	LDX #37	LDY #40	LDA #8BAR_THROW:	JSR V_SYNC	JSR IMEOR	JSR V_SYNC	JSR V_SYNC	JSR IMEOR	INY	INY	INX	CPX #43	BNE BAR_THROW	INC BLANKS	LDA BLANKS	SEC	SBC #1	JSR SPEEK_NUMBER	LDA BLANKS	CMP #4	BEQ FINITO_BENITO	LDA #1	JSR DRAWSCR	JMP PLAY_6FINITO_BENITO:	LDA #0	; GAME OVER 	STA DEAD	RTSPAUSE:	INC DELYCOUNT	LDA DELYCOUNTDEL2:	CMP #100	BCS PAUS1	RTSPAUS1:	LDA #0	STA DELYCOUNT	STA GOTS	JMP F_TIMB_O_T_F:	LDA #0	JSR PARAM	LDX #22	LDY #120	LDA #8	JSR IMEOR	STA BASHES	STA NUMBER_BASHBOTF1:	LDA DEAD	BEQ YER_YER_YER	RTSYER_YER_YER:	JSR TIME_UPDATE	JSR BASH1	LDA NUMBER_BASH	CMP #20	BCC BOTF1	LDA #0	JSR PARAM	LDX #22	LDY #120	LDA #8	JSR IMEOR	LDA #1	JSR PARAM	LDA #6	LDX #23	LDY #86	JSR IMEOR	LDA #0	LDX #22	LDY #86	JSR IMAGE	RTSDBARROWS:	LDA #8	; BARROWS	STA BLSPRITE	LDX #16	LDY #15	LDA #3	; THREE OF THEM	JSR ALONG	LDA #18	; BLANK	STA BLSPRITE	LDX #16	LDY #15	LDA BLANKS	JMP ALONG		; *******************		; ** END OF EVENTS **		; *******************	; COMMON ROUTINES USED FOR	; USING THE ICON ARROW AND	; THE BOXES WITH BODIES INSPEED:	DB 0GARROW:	INC SPEED	LDA SPEED	AND #1	BEQ GOGAR	RTSGOGAR:	JSR JOY	JSR BOX_CORDS	JMP BOX_DISPGARROW2:	JSR JOY	JSR BOX_CORDS	JMP BOX_DISPINIT_ARROW:	LDA #9	; DISPLAY ARROW 	JSR PARAM	; AT FIRST	LDA #0	; BOX USING SBACK	LDX #12	STX OLDAX	STX ARROW_X 	LDY #179	STY OLDAY	STY ARROW_Y	JSR SBACK	RTSBOX_CORDS:	;GET CURRENT BOX NUMBER	LDA ARROW_Y	; CHECK FOR BOX 1	CMP #179	; CORDINATES	BNE box_3_6	LDA ARROW_X	CMP #12	BNE box_2	LDA #1	STA BOXNUMBER	BNE over box_2:	LDA #2	; CHECK FOR BOX 2	STA BOXNUMBER	; CORDINATES	BNE overbox_3_6:	LDA ARROW_X	; CHECK FOR BOX 3	CMP #12	; CORDINATES	BNE box_4_6	LDA #3	STA BOXNUMBER	BNE overbox_4_6:	CMP #22	; CHECK FOR BOX 4	BNE box_5_6	; CODRINATES	LDA #4	STA BOXNUMBER	BNE overbox_5_6:	CMP #32	; MUST BE BOX 5	LDA #5	STA BOXNUMBERover:	RTSBOX_DISP:	; DISPLAY BOX AT NEW	LDA #9	; CORDINATES	JSR PARAM	CLC	LDA Kleft	ADC Kright	ADC Kup	ADC Kdown	ADC KFIRE	BNE yes_key	RTS	JMP no_keyyes_key: 	LDA Kleft	BEQ no_left	LDA ARROW_X	CMP #12	BEQ no_left	SEC	SBC #10	STA ARROW_X	no_left:	LDA Kright	BEQ no_right	LDA ARROW_X	CMP #32	; BOTTOM BOX NO.5	BEQ no_right	CMP #22	BNE do_right	LDA ARROW_Y	CMP #179	BEQ no_rightdo_right:	LDA ARROW_X	CLC	ADC #10	STA ARROW_Xno_right:	LDA Kup	BEQ no_up	LDA ARROW_Y	CMP #179	BEQ no_up	LDA ARROW_X	CMP #32	BEQ no_up	LDA ARROW_Y		SEC	SBC #48	STA ARROW_Yno_up:	LDA Kdown		BEQ no_down	LDA ARROW_Y	CMP #227	BEQ no_down	CLC	ADC #48	STA ARROW_Yno_down:	LDA OLDAX	CMP ARROW_X	BNE UPDATE_ARROW	LDA OLDAY	CMP ARROW_Y	BNE UPDATE_ARROW	RTSUPDATE_ARROW:	JSR V_SYNC	LDA #0	LDX OLDAX	LDY OLDAY	JSR BACK	LDX ARROW_X	STX OLDAX	LDY ARROW_Y	STY OLDAY	JMP SBACK		; ROUTINES COMMON TO THE	; EVENTS THAT USE THE	; STRAGETY OF THE GAME	; OF SIMON  'BEEP' 'BEEP'SIMON_INIT:	; INITIALISE		; VARIABLES	LDA #255	STA LBOX	LDA #0	STA MISSED	STA GOTS	STA FRAME	STA USERPOINT	STA COMPOINT	STA DELYCOUNT	LDY #79RESLDATA:	STA SIMON_BUF,Y	DEY	BNE RESLDATA	JSR F_TIM		RTS	; *************SIMON_PLAY:	LDA DEAD	BEQ PHEW	RTSPHEW:	LDA &85	JSR IMEORMUS	JSR V_SYNC	LDA &85	JSR IMEORMUS	JSR V_SYNC	JSR TIME_UPDATE	JSR GARROW	JSR EFFORTUD	; UPDATE EFFORT	LDA LEVEL6	AND #&FE	; EVENS ONLY	EOR #30	; LEVEL USED	ASL A	; FOR DELAY			ASL A	; OF FLASHING	ASL A	; SPRITES.	ADC #1	; +1 SO NO FLICKER !	STA DEL+1	; SELF MODYFING	JSR SIMON	; CODE OK	LDA KFIRE	BEQ SIMON_PLAY		LDA BOXNUMBER	PHA	JSR BOXDOWN	PLA	CMP LBOX	BEQ SIMON_PLAY	STA LBOX	SEC	SBC #1	PHA	LDA USERPOINT	AND #63	TAY	PLA	CMP SIMON_BUF,Y	RTSSIMON:	INC DELYCOUNT	LDA DELYCOUNTDEL:	CMP #100	BCS SIMON1	RTSSIMON1:	LDA #0	STA DELYCOUNT	INC COMPOINT	LDA COMPOINT	AND #63	STA COMPOINTF_TIM:	LDA #5	JSR RANDOM2	TYA		CMP &85	BEQ F_TIM	LDY COMPOINT	STA SIMON_BUF,Y	STA &85	RTS	EXTEND ':2.R.GAME'